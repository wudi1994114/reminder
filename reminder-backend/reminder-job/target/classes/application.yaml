spring:
  profiles:
    active: local # 默认激活 local profile，以便加载 application-local.yaml
  # Redis配置
  redis:
    host: 123.57.175.66
    port: 6379
    password: Wd941140
    database: 0
    timeout: 10000
    lettuce:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  # PostgreSQL 数据库配置
  datasource:
    url: jdbc:postgresql://123.57.175.66:5432/remind # 指向你的 PostgreSQL 数据库
    driverClassName: org.postgresql.Driver # PostgreSQL 驱动
    username: your_username # 你的数据库用户名
    password: '123456' # 你的数据库密码
    # 使用Druid连接池配置
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 连接池配置
      initial-size: 5 # 初始连接数
      min-idle: 5 # 最小连接池数量
      max-active: 20 # 最大连接池数量
      max-wait: 60000 # 获取连接时最大等待时间，单位毫秒
      time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒
      min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位毫秒
      validation-query: SELECT 1 # 用来检测连接是否有效的sql
      test-while-idle: true # 建议配置为true，不影响性能，并且保证安全性
      test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters
      filters: stat,wall # 监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        enabled: true # 是否启用StatViewServlet（监控页面）
        url-pattern: "/druid/*" # StatViewServlet的访问路径
        reset-enable: false # 禁用HTML页面上的"Reset All"功能
        login-username: admin # 监控页面登录用户名
        login-password: admin # 监控页面登录密码
        allow: # 允许访问的IP，为空则允许所有访问
        deny: # 拒绝访问的IP
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect # PostgreSQL 方言
    # 禁用自动 DDL (因为我们使用 schema.sql), 推荐 validate 或 none
    hibernate:
      ddl-auto: validate # 或 none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy # 显式指定命名策略
    # 关闭SQL语句显示
    show-sql: false
    properties:
      hibernate:
        format_sql: false
  # Quartz 配置 (使用数据库 JobStore)
  quartz:
    job-store-type: jdbc  # 使用jdbc存储而不是内存存储
    jdbc:
      initialize-schema: never  # 修改为 never，因为表已在 quartz_db 中手动创建
    auto-startup: true # 确保Quartz自动启动
    startup-delay: 5s # 延迟5秒启动，确保其他组件已准备就绪
    overwrite-existing-jobs: true # 覆盖已存在的任务
    wait-for-jobs-to-complete-on-shutdown: true # 等待任务完成后再关闭
    properties:
      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate  # 使用PostgreSQL专用的delegate
      org.quartz.jobStore.useProperties: true  # 使用字符串类型存储属性而不是序列化的字节
      org.quartz.jobStore.tablePrefix: QRTZ_
      org.quartz.jobStore.isClustered: true
      org.quartz.jobStore.clusterCheckinInterval: 20000
      org.quartz.jobStore.misfireThreshold: 60000
      org.quartz.threadPool.threadCount: 10
      org.quartz.scheduler.instanceId: AUTO
      org.quartz.scheduler.instanceName: ReminderClusteredScheduler
      # 配置数据源
      org.quartz.jobStore.dataSource: quartzDS
      # 使用自定义的Druid连接池提供者
      org.quartz.dataSource.quartzDS.connectionProvider.class: com.task.reminder.config.DruidConnectionProvider
      # 配置单独的quartz_db数据库
      org.quartz.dataSource.quartzDS.URL: jdbc:postgresql://123.57.175.66:5432/quartz_db
      org.quartz.dataSource.quartzDS.driver: org.postgresql.Driver
      org.quartz.dataSource.quartzDS.user: your_username
      org.quartz.dataSource.quartzDS.password: 123456
      # 连接池基本配置
      org.quartz.dataSource.quartzDS.maxConnections: 10
      org.quartz.dataSource.quartzDS.validationQuery: SELECT 1
      # Druid特有配置
      org.quartz.dataSource.quartzDS.maxWaitMillis: 60000
      org.quartz.dataSource.quartzDS.idleConnectionTestPeriod: 60